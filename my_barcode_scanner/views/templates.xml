<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <template id="scanner_template">
        <html>
            <head>
                <title>Barcode Scanner</title>
                <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
                <link rel="stylesheet" href="/web/static/lib/bootstrap/css/bootstrap.css"/>
                <script type="text/javascript" src="/web/static/lib/jquery/jquery.js"></script>
                <script type="text/javascript" src="https://unpkg.com/@zxing/library@0.19.1/umd/index.min.js"></script>
                <style>
                    #scanner-container {
                        position: relative;
                        width: 100%;
                        max-width: 600px;
                        margin: 0 auto;
                    }
                    video {
                        width: 100%;
                        height: auto;
                        border-radius: 8px;
                    }
                    #result {
                        margin-top: 20px;
                        padding: 10px;
                        border: 1px solid #ccc;
                        border-radius: 5px;
                    }
                    #scan-history {
                        margin-top: 20px;
                        max-height: 300px;
                        overflow-y: auto;
                    }
                    .scan-item {
                        padding: 8px;
                        margin-bottom: 8px;
                        border-bottom: 1px solid #eee;
                    }
                    .scan-success {
                        background-color: #e7f5e7;
                    }
                    .scan-error {
                        background-color: #f8e7e7;
                    }
                </style>
            </head>
            <body>
                <div class="container mt-4">
                    <h3>Mobile Barcode Scanner</h3>
                    <div id="scanner-container">
                        <video id="scanner-video"></video>
                        <div id="result" class="d-none">
                            <h4>Current Scan:</h4>
                            <p id="barcode-value"></p>
                            <p id="product-name"></p>
                            <p id="work-order-update" class="d-none text-success"></p>
                        </div>
                    </div>
                    <div class="mt-3 mb-4">
                        <button id="start-scanner" class="btn btn-primary">Start Scanner</button>
                        <button id="stop-scanner" class="btn btn-secondary ml-2 d-none">Stop Scanner</button>
                        <button id="return-to-work-order" class="btn btn-success ml-2" t-if="work_order_id">Return to Work Order</button>
                        <button id="clear-history" class="btn btn-outline-danger ml-2">Clear History</button>
                    </div>
                    
                    <div id="scan-history" class="mt-3">
                        <h4>Scan History</h4>
                        <div id="scan-items"></div>
                    </div>
                    
                    <div id="barcode_scanner_root" 
                         t-att-data-work-order-id="work_order_id or ''">
                        <!-- This will be the mounting point for the Owl component -->
                    </div>
                    
                    <script type="text/javascript">
                    <![CDATA[
                        document.addEventListener('DOMContentLoaded', function() {
                            console.log("Document ready, initializing scanner...");
                            
                            // Check if ZXing is available
                            if (typeof ZXing === 'undefined') {
                                console.error("ZXing library not loaded");
                                document.getElementById('start-scanner').disabled = true;
                                return;
                            }
                            
                            let codeReader = new ZXing.BrowserMultiFormatReader();
                            let selectedDeviceId;
                            let isScanning = false;
                            let scanHistory = [];
                            
                            // Get work_order_id from URL parameters
                            const urlParams = new URLSearchParams(window.location.search);
                            const workOrderId = urlParams.get('work_order_id') || '';
                            
                            console.log("Work Order ID:", workOrderId);
                            
                            // Function to play a beep sound
                            function playBeepSound() {
                                try {
                                    const AudioContext = window.AudioContext || window.webkitAudioContext;
                                    const audioCtx = new AudioContext();
                                    
                                    const oscillator = audioCtx.createOscillator();
                                    const gainNode = audioCtx.createGain();
                                    
                                    oscillator.type = 'square';
                                    oscillator.frequency.setValueAtTime(1000, audioCtx.currentTime);
                                    oscillator.connect(gainNode);
                                    gainNode.connect(audioCtx.destination);
                                    
                                    gainNode.gain.setValueAtTime(1.0, audioCtx.currentTime);
                                    
                                    oscillator.start();
                                    
                                    setTimeout(function() {
                                        oscillator.frequency.setValueAtTime(1200, audioCtx.currentTime);
                                    }, 75);
                                    
                                    setTimeout(function() {
                                        oscillator.stop();
                                    }, 200);
                                    
                                    console.log("Beep sound played");
                                } catch (e) {
                                    console.error("Error playing beep sound:", e);
                                    
                                    if (navigator && navigator.vibrate) {
                                        navigator.vibrate(200);
                                        console.log("Device vibrated as sound fallback");
                                    }
                                }
                            }
                            
                            // Return to Work Order button
                            const returnButton = document.getElementById('return-to-work-order');
                            if (returnButton) {
                                returnButton.addEventListener('click', function() {
                                    // Add timestamp to force page refresh
                                    const timestamp = new Date().getTime();
                                    window.location.href = '/web#id=' + workOrderId + '&model=simply.vehicle.work.order&view_type=form&t=' + timestamp;
                                });
                            }
                            
                            // Load scan history from localStorage
                            if (localStorage.getItem('barcodeScans')) {
                                try {
                                    scanHistory = JSON.parse(localStorage.getItem('barcodeScans')) || [];
                                    renderScanHistory();
                                } catch(e) {
                                    console.error('Error loading scan history', e);
                                    scanHistory = [];
                                }
                            }
                            
                            // Start Scanner button
                            document.getElementById('start-scanner').addEventListener('click', function() {
                                console.log("Start scanner clicked");
                                startScanner();
                            });
                            
                            // Stop Scanner button
                            document.getElementById('stop-scanner').addEventListener('click', function() {
                                console.log("Stop scanner clicked");
                                stopScanner();
                            });
                            
                            // Clear History button
                            document.getElementById('clear-history').addEventListener('click', function() {
                                console.log("Clear history clicked");
                                scanHistory = [];
                                localStorage.setItem('barcodeScans', JSON.stringify(scanHistory));
                                renderScanHistory();
                            });
                            
                            function startScanner() {
                                console.log("Starting scanner...");
                                document.getElementById('start-scanner').classList.add('d-none');
                                document.getElementById('stop-scanner').classList.remove('d-none');
                                document.getElementById('result').classList.add('d-none');
                                isScanning = true;
                                
                                codeReader.listVideoInputDevices()
                                    .then((videoInputDevices) => {
                                        console.log("Available devices:", videoInputDevices);
                                        
                                        // Use back camera if available
                                        selectedDeviceId = null;
                                        for (let device of videoInputDevices) {
                                            if (device.label.toLowerCase().includes('back')) {
                                                selectedDeviceId = device.deviceId;
                                                break;
                                            }
                                        }
                                        
                                        // Fallback to first camera
                                        if (!selectedDeviceId && videoInputDevices.length > 0) {
                                            selectedDeviceId = videoInputDevices[0].deviceId;
                                        }
                                        
                                        console.log("Selected device ID:", selectedDeviceId);
                                        
                                        // Start video decoding
                                        codeReader.decodeFromVideoDevice(selectedDeviceId, 'scanner-video', (result, err) => {
                                            if (result && isScanning) {
                                                console.log("Barcode detected:", result.text);
                                                
                                                // Play beep sound
                                                playBeepSound();
                                                
                                                // Process the barcode
                                                processBarcodeResult(result.text);
                                                
                                                // Pause scanning
                                                isScanning = false;
                                                setTimeout(() => {
                                                    isScanning = true;
                                                }, 2000);
                                            }
                                            
                                            if (err && !(err instanceof ZXing.NotFoundException)) {
                                                console.error("Scanner error:", err);
                                            }
                                        })
                                        .catch(err => {
                                            console.error("Error starting video stream:", err);
                                            alert("Could not start camera: " + err.message);
                                            stopScanner();
                                        });
                                    })
                                    .catch(err => {
                                        console.error("Error listing devices:", err);
                                        alert("Could not access camera: " + err.message);
                                        stopScanner();
                                    });
                            }
                            
                            function stopScanner() {
                                console.log("Stopping scanner...");
                                codeReader.reset();
                                isScanning = false;
                                document.getElementById('start-scanner').classList.remove('d-none');
                                document.getElementById('stop-scanner').classList.add('d-none');
                            }
                            
                            function processBarcodeResult(barcodeData) {
                                // Display processing
                                document.getElementById('barcode-value').textContent = 'Processing: ' + barcodeData;
                                document.getElementById('result').classList.remove('d-none');
                                document.getElementById('work-order-update').classList.add('d-none');
                                
                                console.log("Processing barcode:", barcodeData);
                                
                                // Add to scan history
                                const scanTime = new Date().toLocaleTimeString();
                                const historyEntry = {
                                    barcode: barcodeData,
                                    product: 'Processing...',
                                    timestamp: scanTime,
                                    status: 'success'
                                };
                                
                                scanHistory.unshift(historyEntry);
                                
                                // Save to localStorage
                                if (scanHistory.length > 50) scanHistory.pop();
                                localStorage.setItem('barcodeScans', JSON.stringify(scanHistory));
                                
                                // Update UI
                                renderScanHistory();
                                
                                // Process barcode with server first if in work order context
                                if (workOrderId) {
                                    stopScanner();
                                    
                                    // Use AJAX to process barcode before redirecting
                                    $.ajax({
                                        url: '/barcode/scan',
                                        type: 'POST',
                                        dataType: 'json',
                                        contentType: 'application/json',
                                        data: JSON.stringify({
                                            jsonrpc: "2.0",
                                            method: "call",
                                            params: {
                                                barcode_data: barcodeData,
                                                work_order_id: workOrderId
                                            },
                                            id: new Date().getTime()
                                        }),
                                        success: function(response) {
                                            console.log("Barcode processed:", response);
                                            
                                            if (response && response.result) {
                                                const result = response.result;
                                                
                                                // Update the scan history with product info
                                                for (let i = 0; i < scanHistory.length; i++) {
                                                    if (scanHistory[i].barcode === barcodeData) {
                                                        scanHistory[i].product = result.product_name || 'Not Found';
                                                        scanHistory[i].work_order_updated = result.work_order_updated || false;
                                                        scanHistory[i].status = result.error ? 'error' : 'success';
                                                        break;
                                                    }
                                                }
                                                
                                                // Save updated history
                                                localStorage.setItem('barcodeScans', JSON.stringify(scanHistory));
                                                renderScanHistory();
                                                
                                                // Display product info
                                                document.getElementById('product-name').textContent = 'Product: ' + (result.product_name || 'Not Found');
                                                
                                                if (result.work_order_updated) {
                                                    const updateElem = document.getElementById('work-order-update');
                                                    updateElem.textContent = 'Added to Work Order';
                                                    updateElem.classList.remove('d-none');
                                                }
                                                
                                                // Add a short delay before redirecting
                                                setTimeout(function() {
                                                    // Add timestamp to force page refresh
                                                    const timestamp = new Date().getTime();
                                                    window.location.href = '/web#id=' + workOrderId + '&model=simply.vehicle.work.order&view_type=form&t=' + timestamp;
                                                }, 1500);
                                            } else {
                                                // Handle error or redirect anyway
                                                setTimeout(function() {
                                                    const timestamp = new Date().getTime();
                                                    window.location.href = '/web#id=' + workOrderId + '&model=simply.vehicle.work.order&view_type=form&t=' + timestamp;
                                                }, 1500);
                                            }
                                        },
                                        error: function(error) {
                                            console.error("Error processing barcode:", error);
                                            
                                            // Update the scan history with error
                                            for (let i = 0; i < scanHistory.length; i++) {
                                                if (scanHistory[i].barcode === barcodeData) {
                                                    scanHistory[i].product = 'Error processing barcode';
                                                    scanHistory[i].status = 'error';
                                                    break;
                                                }
                                            }
                                            
                                            // Save updated history
                                            localStorage.setItem('barcodeScans', JSON.stringify(scanHistory));
                                            renderScanHistory();
                                            
                                            // Still redirect after an error, but with a delay
                                            setTimeout(function() {
                                                const timestamp = new Date().getTime();
                                                window.location.href = '/web#id=' + workOrderId + '&model=simply.vehicle.work.order&view_type=form&t=' + timestamp;
                                            }, 1500);
                                        }
                                    });
                                } else {
                                    // If no work order ID, just process the scan locally
                                    // Find product info via AJAX for display
                                    $.ajax({
                                        url: '/barcode/scan',
                                        type: 'POST',
                                        dataType: 'json',
                                        contentType: 'application/json',
                                        data: JSON.stringify({
                                            jsonrpc: "2.0",
                                            method: "call",
                                            params: {
                                                barcode_data: barcodeData
                                            },
                                            id: new Date().getTime()
                                        }),
                                        success: function(response) {
                                            console.log("Product info:", response);
                                            if (response && response.result) {
                                                const result = response.result;
                                                
                                                // Update the scan history with product info
                                                for (let i = 0; i < scanHistory.length; i++) {
                                                    if (scanHistory[i].barcode === barcodeData) {
                                                        scanHistory[i].product = result.product_name || 'Not Found';
                                                        scanHistory[i].status = result.error ? 'error' : 'success';
                                                        break;
                                                    }
                                                }
                                                
                                                // Save updated history
                                                localStorage.setItem('barcodeScans', JSON.stringify(scanHistory));
                                                renderScanHistory();
                                                
                                                // Display product info
                                                document.getElementById('product-name').textContent = 'Product: ' + (result.product_name || 'Not Found');
                                            }
                                            
                                            // Re-enable scanning
                                            setTimeout(() => {
                                                isScanning = true;
                                            }, 1000);
                                        },
                                        error: function(error) {
                                            console.error("Error getting product info:", error);
                                            
                                            // Re-enable scanning
                                            setTimeout(() => {
                                                isScanning = true;
                                            }, 1000);
                                        }
                                    });
                                }
                            }
                            
                            function renderScanHistory() {
                                const container = document.getElementById('scan-items');
                                container.innerHTML = '';
                                
                                if (scanHistory.length === 0) {
                                    container.innerHTML = '<p class="text-muted">No scan history yet.</p>';
                                    return;
                                }
                                
                                scanHistory.forEach(scan => {
                                    const item = document.createElement('div');
                                    item.className = 'scan-item ' + (scan.status === 'success' ? 'scan-success' : 'scan-error');
                                    
                                    let itemHTML = `
                                        <div><strong>Barcode:</strong> ${scan.barcode}</div>
                                        <div><strong>Product:</strong> ${scan.product}</div>
                                        <div><small class="text-muted">Scanned at ${scan.timestamp}</small></div>
                                    `;
                                    
                                    if (scan.work_order_updated) {
                                        itemHTML += `<div><span class="text-success">✓ Added to Work Order</span></div>`;
                                    }
                                    
                                    item.innerHTML = itemHTML;
                                    container.appendChild(item);
                                });
                            }
                            
                            // Auto-start scanner on mobile
                            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                                console.log("Mobile device detected, auto-starting scanner");
                                setTimeout(startScanner, 500);
                            }
                        });
                    ]]>
                    </script>
                </div>
            </body>
        </html>
    </template>
</odoo>
